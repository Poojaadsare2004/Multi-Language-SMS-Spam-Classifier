import streamlit as st
import pickle
import pandas as pd  # Import pandas
import string

# Load the model, vectorizer, and selector
try:
    vectorizer = pickle.load(open("vectorizer.pkl", "rb"))
    selector = pickle.load(open("selector.pkl", "rb"))
    model = pickle.load(open("spam_classifier.pkl", "rb"))
except FileNotFoundError:
    st.error("Required files (model, vectorizer, selector) not found. Make sure they are in the same directory as the app.")
    st.stop()

# Preprocessing function
def preprocess_text(text):
    text = text.translate(str.maketrans('', '', string.punctuation))  # Remove punctuation
    return text

# Prediction function
def predict_spam(text):
    preprocessed_text = preprocess_text(text)
    text_vector = vectorizer.transform([preprocessed_text])
    text_selected = selector.transform(text_vector)
    prediction = model.predict(text_selected)[0]
    return prediction

# Streamlit app
def main():
    st.title("Multilingual Spam Classifier")

    # Language selection
    language = st.selectbox("Select Language", ["English", "German", "French", "Hindi"])

    # Text input
    message = st.text_area(f"Enter {language} message here", "")

    if st.button("Predict"):
        if message:
            prediction = predict_spam(message)
            if prediction == "spam":
                st.error("This message is classified as SPAM.")
            else:
                st.success("This message is classified as HAM (not spam).")
        else:
            st.warning("Please enter a message to classify.")

    # Sample messages in different languages
    st.subheader("Sample Messages")
    sample_data = {
        "English": "Get a free iPhone now!",
        "German": "Gratis iPhone jetzt!",
        "French": "iPhone gratuit maintenant !",
        "Hindi": "Muft iPhone abhi pao!"
    }
    sample_df = pd.DataFrame.from_dict(sample_data, orient='index', columns=['message']) #Create dataframe

    for language, row in sample_df.iterrows():
        st.write(f"**{language}:** {row['message']}")

if __name__ == '__main__':
    main()
